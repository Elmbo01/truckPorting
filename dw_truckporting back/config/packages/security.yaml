security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    App\Entity\User:
      algorithm: auto

  encoders:
    App\Entity\UserMgr\User:
      algorithm: auto

  providers:
    entity_provider:
      entity:
        class: App\Entity\UserMgr\User
        property: email
  role_hierarchy:
    #ROLE_USER:
    ROLE_EMPRESA: [ROLE_USER]
    ROLE_ADMIN: [ROLE_USER, ROLE_EMPRESA]
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      pattern: ^/login
      stateless: true
      #anonymous: true
      json_login:
        check_path: /login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    register:
      pattern: ^/register
      stateless: true
      #anonymous: true

    api:
      pattern: ^/api
      stateless: true
      anonymous: false
      provider: entity_provider
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/offers, roles: IS_AUTHENTICATED_FULLY }

    #Evento
    - { path: ^/evento, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/evento/([0-9]+), metho,roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/evento/([0-9]+), methods:[],roles: IS_AUTHENTICATED_ANONYMOUSLY }
    #Empresa
    - { path: ^/empresa, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/empresa/([0-9]+), roles: IS_AUTHENTICATED_ANONYMOUSLY }

    #Vehiculo
    - { path: ^/vehiculo, roles: ROLE_EMPRESA }
    - { path: ^/vehiculo/([0-9]+), roles: ROLE_EMPRESA }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon

